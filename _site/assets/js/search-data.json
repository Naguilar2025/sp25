{"0": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"1": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"2": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"3": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"4": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"5": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"6": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"7": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"8": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"9": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"10": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"11": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"12": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"13": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"14": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"15": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"16": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"17": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"18": {
    "doc": "Announcements",
    "title": "",
    "content": " ",
    "url": "/sp25/announcements/",
    
    "relUrl": "/announcements/"
  },"19": {
    "doc": "üè† Home",
    "title": "Data 8: Foundations of Data Science",
    "content": "UC Berkeley, Spring 2025 . Ed Gradescope Lecture Recordings Jump to Current Week . ‚Üê Previous Week Next Week ‚Üí ",
    "url": "/sp25/#data-8-foundations-of-data-science",
    
    "relUrl": "/#data-8-foundations-of-data-science"
  },"20": {
    "doc": "üè† Home",
    "title": "Week 17 Announcements",
    "content": "Dec 16 . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"21": {
    "doc": "üè† Home",
    "title": "Week 16 Announcements",
    "content": "Dec 8 . | RRR Week OH (Online + IRL @Warren 101B) . | Wednesday 12-5 PM | Thursday 10-2 PM | . | TA-led review sessions @VLSB 2050 . | Monday (12/9) from 3-5 PM focusing on pre-midterm content | Wednesday (12/11) from 6-8 PM focusing on post-midterm content | . | Past Finals Megathread | Final Exam Preparation Tips | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"22": {
    "doc": "üè† Home",
    "title": "Week 15 Announcements",
    "content": "Nov 30 . | Assignments Due . | is due on Friday, December 6th @ 5 PM | is due on Friday, December 6th @ 5 PM | is due on Sunday, December 8th @ 5 PM | . | Please read: For Lecture 37 and Ch 17.6 | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"23": {
    "doc": "üè† Home",
    "title": "Week 14 Announcements",
    "content": "Nov 25 . | Happy Thanksgiving! | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"24": {
    "doc": "üè† Home",
    "title": "Week 13 Announcements",
    "content": "Nov 18 . | Assignments Due . | is due on Wednesday, November 20th @ 5 PM | Checkpoint is due on Friday, November 22nd @ 5 PM | is due on Tuesday, November 26th @ 5 PM | . | Note: Homework 12 is due on Tuesday with EC deadline being Monday. We will release this assignment early to give ample time. | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"25": {
    "doc": "üè† Home",
    "title": "Week 12 Announcements",
    "content": "Nov 11 . | Assignments Due . | is due on Wednesday, November 13th @ 5 PM | is due on Friday, November 15th @ 5 PM | is due on Friday, November 15th @ 5 PM | is due on Wednesday, November 20th @ 5 PM | Checkpoint is due on Friday, November 22nd @ 5 PM | . | HW 08, Lab 08 Scores Released | Project 2 Party, Wednesday 6-8 PM . | Warren Hall, Sections D&amp;E | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"26": {
    "doc": "üè† Home",
    "title": "Week 11 Announcements",
    "content": "Nov 4 . | Assignments Due . | is due on Wednesday, November 6th @ 5 PM | is due on Wednesday, November 13th @ 5 PM | Checkpoint is due on Friday, November 8th @ 5 PM | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"27": {
    "doc": "üè† Home",
    "title": "Week 10 Announcements",
    "content": "Oct 28 . | Assignments Due . | is due on Wednesday, October 30th @ 5 PM | is due on Friday, November 1st @ 5 PM | is due on Wednesday, November 6th @ 5 PM | Checkpoint is due on Friday, November 8th @ 5 PM | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"28": {
    "doc": "üè† Home",
    "title": "Week 9 Announcements",
    "content": "Oct 21 . | Assignments Due . | is due on Friday, October 25th @ 5 PM | is due on Wednesday, October 30th @ 5 PM | . | Congratulations on completing the Data 8 Midterm!! | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"29": {
    "doc": "üè† Home",
    "title": "Week 8 Announcements",
    "content": "Oct 14 . | Assignments Due . | is due on Wednesday, October 16th @ 5 PM | . | The midterm is on Friday, 10/18, 7-9 PM . | Midterm Preparation Tips post | Exam Study Partner Thread | Midterm review session will be Monday night from 7-9 PM at GPBB 100 | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"30": {
    "doc": "üè† Home",
    "title": "Week 7 Announcements",
    "content": "Oct 7 . | Assignments Due . | is due on Wednesday, October 9th @ 5 PM | is due on Friday, October 11th @ 5 PM | is due on Wednesday, October 16th @ 5 PM | . | The midterm is on Friday, 10/18, 7-9 PM | Midterm Preparation Tips post | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"31": {
    "doc": "üè† Home",
    "title": "Week 6 Announcements",
    "content": "Sep 30 . | Assignments Due . | is due on Wednesday, October 2nd @ 5 PM | is due on Friday, October 4th @ 5 PM | . | Everything due on Friday, October 4th @ 5 PM | Make sure to add your project partner to your written and autograder submission! | . | . | The midterm is on Friday, 10/18, 7-9 PM | HW 03, Lab 04 Score Release post | Project 1 Party on Thursday 6-8PM at Evans 458 | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"32": {
    "doc": "üè† Home",
    "title": "Week 5 Announcements",
    "content": "Sep 23 . | Assignments Due . | is due on Wednesday, September 25th @ 5 PM | . | Checkpoint due on Friday, September 27th @ 5 PM | Everything due on Friday, October 4th @ 5 PM | . | is due on Wednesday, October 2nd @ 5 PM | . | The midterm is on Friday, 10/18, 7-9 PM . | If you have a time conflict with the midterm, fill out the alternate exam form by Friday, September 27th @ 5 PM | . | Lab 03, HW 02 Score Release post | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"33": {
    "doc": "üè† Home",
    "title": "Week 4 Announcements",
    "content": "Sep 16 . | Assignments Due . | is due on Wednesday, September 18th @ 5 PM | is due on Friday, September 20th @ 5 PM | is due on Wednesday, September 25th @ 5 PM | . | Checkpoint due on Friday, September 27th @ 5 PM | Everything due on Friday, October 4th @ 5 PM | . | . | The midterm is on Friday, 10/18, 7-9 PM . | If you have a time conflict with the midterm, fill out the alternate exam form ASAP | . | Lab 01, Lab 02, HW 01 Score Release post . | Check that your score looks correct! | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"34": {
    "doc": "üè† Home",
    "title": "Week 3 Announcements",
    "content": "Sep 9 . | Assignments Due . | is due on Wednesday, September 11th @ 5 PM | is due on Friday, September 13th @ 5 PM | is due on Wednesday, September 18th @ 5 PM | . | Tutoring Section Sign-Ups . | Go to tutoring.data8.org to enroll in a tutoring section! | Details about tutoring sections can be found on this Edstem post | . | Lecture Capacity . | Jeremy‚Äôs message: ‚ÄúPlease do not let the large capacity crowds discourage you from showing up!!‚Äù | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"35": {
    "doc": "üè† Home",
    "title": "Week 2 Announcements",
    "content": "Sep 2 . | Assignments Due . | is due on Wednesday, September 4th @ 5 PM | is due on Friday, September 6th @ 5 PM | is due on Wednesday, September 11th @ 5 PM | . | Lab Switching . | You can switch your lab until Tuesday (September 3 at 11:59 pm) via sections.data8.org | . | No Lecture on Monday September 2nd | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"36": {
    "doc": "üè† Home",
    "title": "Week 1 Announcements",
    "content": "Aug 28 . | Assignments Due . | is due on Friday, August 30th @ 5 PM | is due on Wednesday, September 4th @ 5 PM | . | Lab Switching . | You can switch your lab until Tuesday (September 3 at 11:59 pm) via sections.data8.org | . | No Lecture on Monday September 2nd | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"37": {
    "doc": "üè† Home",
    "title": "Week 0 Announcements",
    "content": "Aug 19 . | Lectures are in Wheeler 150 . | First day of class is on Wednesday 8/28! | . | . ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"38": {
    "doc": "üè† Home",
    "title": "Week 1",
    "content": "Aug 28 1 Introduction Reading: 1.1, 1.2, 1.3 Lab (Due 8/30) Discussion Aug 30 2 Cause and Effect Reading: 2 Homework (Due 9/4) ",
    "url": "/sp25/#week-1",
    
    "relUrl": "/#week-1"
  },"39": {
    "doc": "üè† Home",
    "title": "Week 2",
    "content": "Sep 2 Labor Day No class Lab (Due 9/6) Sep 4 3 Tables Reading: 3 Discussion Sep 6 4 Data Types Reading: 4, 5 Homework (Due 9/11) ",
    "url": "/sp25/#week-2",
    
    "relUrl": "/#week-2"
  },"40": {
    "doc": "üè† Home",
    "title": "Week 3",
    "content": "Sep 9 5 Building Tables Reading: 6.1, 6.2 Lab (Due 9/13) Sep 11 6 Census Reading: 6.3, 6.4 Discussion Sep 13 7 Charts Reading: 7, 7.1 Homework (Due 9/18) ",
    "url": "/sp25/#week-3",
    
    "relUrl": "/#week-3"
  },"41": {
    "doc": "üè† Home",
    "title": "Week 4",
    "content": "Sep 16 8 Histograms Reading: 7.2, 7.3 Lab (Due 9/20) Sep 18 9 Functions Reading: 8, 8.1 Discussion Sep 20 10 Groups Reading: 8.2, 8.3 Homework (Due 9/25) Project (Due Fri 10/4, Checkpoint Fri 9/27) ",
    "url": "/sp25/#week-4",
    
    "relUrl": "/#week-4"
  },"42": {
    "doc": "üè† Home",
    "title": "Week 5",
    "content": "Sep 23 11 Pivots and Joins Reading: 8.4 Lab Project 1 Work Time Sep 25 12 Iteration Reading: 9, 9.1, 9.2 Discussion Sep 27 13 Chance Reading: 9.2, 9.3, 9.4 Homework (Due 10/2) ",
    "url": "/sp25/#week-5",
    
    "relUrl": "/#week-5"
  },"43": {
    "doc": "üè† Home",
    "title": "Week 6",
    "content": "Sep 30 14 Sampling Reading: 9.5, 10 Lab (Due 10/4) Oct 2 15 Models Reading: 10.2, 10.3, 10.4 Discussion Oct 4 16 Comparing Distributions Reading: 11.1, 11.2 Homework (Due 10/9) ",
    "url": "/sp25/#week-6",
    
    "relUrl": "/#week-6"
  },"44": {
    "doc": "üè† Home",
    "title": "Week 7",
    "content": "Oct 7 17 Decisions and Uncertainty Reading: 11.3, 11.4 Lab (Due 10/11) Oct 9 18 A/B Testing Reading: 11.4, 12.1 Discussion Oct 11 19 Causality Reading: 12.2, 12.3 Homework (Due 10/16) ",
    "url": "/sp25/#week-7",
    
    "relUrl": "/#week-7"
  },"45": {
    "doc": "üè† Home",
    "title": "Week 8",
    "content": "Oct 14 20 Midterm Review I Lab Midterm Review Oct 16 21 Midterm Review II Discussion Oct 18 22 Midterm Review III Exam Midterm Exam (7 - 9 PM) ",
    "url": "/sp25/#week-8",
    
    "relUrl": "/#week-8"
  },"46": {
    "doc": "üè† Home",
    "title": "Week 9",
    "content": "Oct 21 23 Confidence Intervals Reading: 13, 13.1, 13.2 Lab (Due 10/25) Oct 23 24 Interpreting Confidence Reading: 13.3, 13.4 Discussion Oct 25 25 Center and Spread Reading: 14, 14.1, 14.2 Homework (Due 10/30) ",
    "url": "/sp25/#week-9",
    
    "relUrl": "/#week-9"
  },"47": {
    "doc": "üè† Home",
    "title": "Week 10",
    "content": "Oct 28 26 The Normal Distribution Reading: 14.3, 14.4 Lab (Due 11/1) Oct 30 27 Sample Means Reading: 14.5 Discussion Nov 1 28 Designing Experiments Reading: 14.6 Homework (Due 11/6) Project (Due Fri 11/15, Checkpoint Fri 11/8) ",
    "url": "/sp25/#week-10",
    
    "relUrl": "/#week-10"
  },"48": {
    "doc": "üè† Home",
    "title": "Week 11",
    "content": "Nov 4 29 Correlation Reading: 15.1 Nov 6 30 Linear Regression Reading: 15.2 Discussion Nov 8 31 Least Squares Reading: 15.3, 15.4 Homework (Due 11/13) ",
    "url": "/sp25/#week-11",
    
    "relUrl": "/#week-11"
  },"49": {
    "doc": "üè† Home",
    "title": "Week 12",
    "content": "Nov 11 Veterans Day No class Lab (Due 11/15) Nov 13 32 Residuals Reading: 15.5, 15.6 Discussion Nov 15 33 Regression Inference Reading: 16 Homework (Due 11/20) Project (Due Fri 12/6, Checkpoint Fri 11/22) ",
    "url": "/sp25/#week-12",
    
    "relUrl": "/#week-12"
  },"50": {
    "doc": "üè† Home",
    "title": "Week 13",
    "content": "Nov 18 34 Classification Reading: 17.1, 17.2 Nov 20 35 Implementing Classifiers Reading: 17.3, 17.4 Discussion Nov 22 36 Evaluating Classifiers Reading: 17.5 Homework (Due 11/26) ",
    "url": "/sp25/#week-13",
    
    "relUrl": "/#week-13"
  },"51": {
    "doc": "üè† Home",
    "title": "Week 14",
    "content": "Nov 25 37 Multiple Linear Regression Reading: 17.6 Nov 27 Holiday No class Nov 29 Holiday No class ",
    "url": "/sp25/#week-14",
    
    "relUrl": "/#week-14"
  },"52": {
    "doc": "üè† Home",
    "title": "Week 15",
    "content": "Dec 2 38 Updating Probabilities Reading: 18, 18.1, 18.2 Lab (Due 12/6) Homework (Due 12/8) Dec 4 39 Case Study: Computer Vision &amp; Staff Panel Discussion Dec 6 40 Conclusion ",
    "url": "/sp25/#week-15",
    
    "relUrl": "/#week-15"
  },"53": {
    "doc": "üè† Home",
    "title": "RRR Week",
    "content": "Dec 9 41 Final Review Part I: Inference Dec 11 42 Final Review Part II: Prediction Dec 13 43 Final Review Part III: Exploration ",
    "url": "/sp25/#rrr-week",
    
    "relUrl": "/#rrr-week"
  },"54": {
    "doc": "üè† Home",
    "title": "Final",
    "content": "Dec 16 Exam Final Exam (8-11 AM) ",
    "url": "/sp25/#final",
    
    "relUrl": "/#final"
  },"55": {
    "doc": "üè† Home",
    "title": "üè† Home",
    "content": " ",
    "url": "/sp25/",
    
    "relUrl": "/"
  },"56": {
    "doc": "üíª Debugging",
    "title": "Debugging",
    "content": " ",
    "url": "/sp25/debugging/#debugging",
    
    "relUrl": "/debugging/#debugging"
  },"57": {
    "doc": "üíª Debugging",
    "title": "Table of Contents",
    "content": ". | Cells and the Autograder . | Why does running a particular cell cause my kernel to die? | My python code cell has turned into a text/markdown cell. How do I change it back? | My markdown text cell has turned into a code cell. How do I change it back? | How do I quickly run all the cells in a notebook? | Why does grader.check_all() fail, if all previous tests passed? | Why does a notebook test fail now, when it passed before and I didn‚Äôt change my code? | Why did a Gradescope test fail, when all the notebook‚Äôs tests passed? | Why do I get an error saying grader is not defined? | I‚Äôm positive I have the right answer, but the test fails. Is there a mistake in the test? | I accidentally deleted something in a cell that was provided to me ‚Äì how do I get it back? | . | Specific Errors . | ‚Ä¶ object is not callable | SyntaxError at the very beginning of a line of code | . | DataHub . | Why can‚Äôt I log in to DataHub? | My notebook won‚Äôt load. Is DataHub down? | What if I don‚Äôt have access to DataHub and I still want to access Data 8 materials? | . | . ",
    "url": "/sp25/debugging/#table-of-contents",
    
    "relUrl": "/debugging/#table-of-contents"
  },"58": {
    "doc": "üíª Debugging",
    "title": "Cells and the Autograder",
    "content": "Why does running a particular cell cause my kernel to die? . If one particular cell seems to cause your kernel to die, your code is probably incorrect in a way that is causing the computer to use more memory than it has available. For instance: your code is trying to create a gigantic array. To prevent from crashing the entire server, the kernel will ‚Äúdie‚Äù. This is an indication that there is a mistake in your code that you need to fix. My python code cell has turned into a text/markdown cell. How do I change it back? . Click on the cell and select Markdown &gt; Code in the top toolbar. Alternatively, click on the cell and press y. My markdown text cell has turned into a code cell. How do I change it back? . Click on the cell and select Code &gt; Markdown in the top toolbar. Alternatively, click on the cell and press m. How do I quickly run all the cells in a notebook? . Go to the Cell menu in the top toolbar, then ‚ÄúRun All.‚Äù You can also select a certain cell and run all cells before this point, or run all cells after this point. You should run all the cells in your notebook before submitting to confirm that you pass all the tests. Why does grader.check_all() fail, if all previous tests passed? . This can happen if you ‚Äúoverwrite‚Äù a variable that is used in a question. For instance, if Question 1 asks you to store your answer in a variable named stat, and later on in the notebook you change the value of stat, you‚Äôll see the test after Question 1 pass, but the test at the end of the notebook fail. Make sure to avoid using the same variable name for more than one purpose. Why does a notebook test fail now, when it passed before and I didn‚Äôt change my code? . You probably ran your notebook out of order. Re-run all previous cells in order, which is how your code will be graded. Why did a Gradescope test fail, when all the notebook‚Äôs tests passed? . This can happen if you‚Äôre running your notebook‚Äôs cells out-of-order. The autograder runs your notebook top-to-bottom. If you‚Äôre defining a variable at the bottom of your notebook and using it at the top, the Gradescope autograder will fail because it doesn‚Äôt recognize the variable when it encounters it. Additionally, this can fail if you have not saved before you run the autograder. Ensure you select File -&gt; Save Notebook to avoid this. This is why we recommend running Kernel -&gt; Restart and Run All: it ‚Äúforgets‚Äù all of the variables and runs the notebook from top-to-bottom, just like the Gradescope autograder will. This will highlight any issues. Find the first cell that raises an error. Make sure that all of the variables used in that cell have been defined above that cell, and not below. Why do I get an error saying grader is not defined? . If it has been a while since you‚Äôve worked on an assignment, the kernel will shut itself down to preserve memory. When this happens, all of your variables are forgotten, including the grader. That‚Äôs OK: you‚Äôll just need to re-run all of the cells. The easiest way to do this is by using Kernel -&gt; Restart and Run All. This may also occur if you never ran the top cell of the notebook where the grader is defined. I‚Äôm positive I have the right answer, but the test fails. Is there a mistake in the test? . While you might see the correct answer displayed as the result of the cell, chances are it isn‚Äôt being stored in the answer variable. Make sure you are assigning the result to the answer variable. Make sure there are no typos in the variable name. I accidentally deleted something in a cell that was provided to me ‚Äì how do I get it back? . There are two solutions: . | In this public GitHub repository, you‚Äôll find the ‚Äúoriginal‚Äù versions of all assignments we released this semester. You can look here and manually add back any necessary code or text that you accidentally deleted. | Suppose you‚Äôre working on Lab 5. One solution is go directly to DataHub and rename your lab05 folder to something else, like lab05-old. Then, click the Lab 5 link on the course website again, and it‚Äôll bring you to a brand-new version of Lab 5. Then, you can copy your work from your old Lab 5 to this new one, which should have everything in it. | . ",
    "url": "/sp25/debugging/#cells-and-the-autograder",
    
    "relUrl": "/debugging/#cells-and-the-autograder"
  },"59": {
    "doc": "üíª Debugging",
    "title": "Specific Errors",
    "content": "A general rule of thumb when debugging is to look at the very last line of an error message. That‚Äôs usually the most informative part of the message, and will often tell you directly what‚Äôs wrong. ‚Ä¶ object is not callable . This often happens when you use a default keyword (like str or list) as a variable name, for instance list = [1, 2, 3]. These errors can be tricky because they don‚Äôt error on their own, but cause problems when we try to use the name list (for example) later on in the notebook. To fix the issue, identify any such lines of code, change your variable names to be something else, and restart your notebook. Python keywords like str and list appear in green text, so be on the lookout if any of your variable names appear in green! . SyntaxError at the very beginning of a line of code . Python expected you to continue your last line of code. Typically this means you have mismatched parentheses on the line above the line that is erroring. ",
    "url": "/sp25/debugging/#specific-errors",
    
    "relUrl": "/debugging/#specific-errors"
  },"60": {
    "doc": "üíª Debugging",
    "title": "DataHub",
    "content": "Why can‚Äôt I log in to DataHub? . Log out of all Google accounts or open an incognito window. When prompted, enter your full Berkeley email, username@berkeley.edu, as your credentials. My notebook won‚Äôt load. Is DataHub down? . Sometimes DataHub does have availability issues. Usually it is back up and running again within an hour. In other instances, there are some things you can do to get the notebook running again: Make sure your internet connection is working. If you can, restart your server by clicking the button at the top right labeled ‚ÄúControl Panel‚Äù, then select ‚ÄúStop My Server‚Äù, followed by ‚ÄúStart My Server‚Äù. If that doesn‚Äôt work, try restarting your computer and using a different browser. Whenever you resume working on a notebook, run all cells you‚Äôve previously completed. If your problem persists after trying all these steps, please notify us on Ed. What if I don‚Äôt have access to DataHub and I still want to access Data 8 materials? . We welcome the general public to use our materials. If you‚Äôre not enrolled in the class, you can access all lectures and assignments in our public GitHub repository. In order to run Jupyter notebooks locally on your own computer, we recommend using Anaconda. Courtesies to DSC 10: Principles of Data Science and their debugging guide, as it was of great inspiration! . ",
    "url": "/sp25/debugging/#datahub",
    
    "relUrl": "/debugging/#datahub"
  },"61": {
    "doc": "üíª Debugging",
    "title": "üíª Debugging",
    "content": " ",
    "url": "/sp25/debugging/",
    
    "relUrl": "/debugging/"
  },"62": {
    "doc": "ü§î FAQs",
    "title": "Frequently Asked Questions",
    "content": ". Q: What is the best way to get help in this course? A: Your best avenues are to go to office hours held by the course staff, or to ask questions on Ed. Course staff will be monitoring Ed frequently and will try to answer your question quickly and thoroughly. Q: Where will our grades for assignments be displayed for the course? A: Grades will be displayed on Gradescope for the written and autograded portions for all assignments (homeworks, labs, projects, and exams). For homeworks and projects, your total grade is the sum of the autograded portion and the written portion. Q: I passed all the tests when doing my homework/project, but still got points off on the autograded portion of the assignment. Why is this happening? A: The homeworks and projects have hidden tests that are not visible to students while they do the assignment. In order to pass these hidden tests, you must test your code yourself and make sure your answer is correct. Our tests are not always comprehensive. Q: I have a 80/100 on my grade report for a lab that I attended and got checked off. Why is this? A: Your attendance may have been marked incorrectly. Please contact your lab TA. Q: I worked with a partner on a project, and they have a grade on Gradescope for the project while I do not. Why is this happening? A: You were likely not added to the Gradescope submission. Have your partner add you to both the written work and autograder submission immediately and contact your lab TA. Q: I noticed a mistake in the grading of the written portion of my homework. How can I get this fixed? A: To get this fixed, you must submit a regrade request via Gradescope before the regrade deadline. This is known as the regrade request window. We unfortunately will not accept any regrades after the window has closed. All regrade deadline dates are posted on the same Ed post that releases the assignment grades and solutions. Q: I have some other grading questions. Who should I contact? A: Please contact your lab GSI. Q: I would like to apply for a (u)GSI position for this course. What should I do? A: All applications for Academic Student Employee positions are managed centrally; you can find all the details here. Please do not email the instructors individually with your resume/etc, as they are not in a position to hire you. ",
    "url": "/sp25/faq/#frequently-asked-questions",
    
    "relUrl": "/faq/#frequently-asked-questions"
  },"63": {
    "doc": "ü§î FAQs",
    "title": "ü§î FAQs",
    "content": " ",
    "url": "/sp25/faq/",
    
    "relUrl": "/faq/"
  },"64": {
    "doc": "Welcome!",
    "title": "UC Berkeley Class Site Template",
    "content": "Just the Class is a GitHub Pages template developed for the purpose of quickly deploying course websites. In addition to serving plain web pages and files, it provides a boilerplate for: . | announcements, | a course calendar, | a staff page, | and a weekly schedule. | . Just the Class is a template that extends the popular Just the Docs theme, which provides a robust and thoroughly-tested foundation for your website. Just the Docs include features such as: . | automatic navigation structure, | instant, full-text search and page indexing, | and a set of UI components and authoring utilities. | . ",
    "url": "/sp25/home/#uc-berkeley-class-site-template",
    
    "relUrl": "/home/#uc-berkeley-class-site-template"
  },"65": {
    "doc": "Welcome!",
    "title": "Getting Started",
    "content": "Getting started with Just the Class is simple. | Create a new repository based on Just the Class. | Update _config.yml and README.md with your course information. Be sure to update the url and baseurl. | Configure a publishing source for GitHub Pages. Your course website is now live! | Edit and create .md Markdown files to add more content pages. | . Just the Class has been used by instructors at Stanford University (CS 161), UC Berkeley (Data 100), UC Santa Barbara (CSW8), Northeastern University (CS4530/5500), and Carnegie Mellon University (17-450/17-950). Share your course website and find more examples in the show and tell discussion! . Local development environment . Just the Class requires no special Jekyll plugins and can run on GitHub Pages‚Äô standard Jekyll compiler. To setup a local development environment, clone your template repository and follow the GitHub Docs on Testing your GitHub Pages site locally with Jekyll. ",
    "url": "/sp25/home/#getting-started",
    
    "relUrl": "/home/#getting-started"
  },"66": {
    "doc": "Welcome!",
    "title": "Welcome!",
    "content": " ",
    "url": "/sp25/home/",
    
    "relUrl": "/home/"
  },"67": {
    "doc": "üìú Policies",
    "title": "Policies",
    "content": " ",
    "url": "/sp25/policies/#policies",
    
    "relUrl": "/policies/#policies"
  },"68": {
    "doc": "üìú Policies",
    "title": "Table of contents",
    "content": ". | About the Course . | Course Description | Prerequisites | Materials &amp; Resources | Support | . | Course Components . | Live Lecture | Labs | Homework and Projects | Exams | . | Grades . | Submitting Assignments | Late Submission | Assignment Extensions | Accommodations . | Privacy | . | Learning Cooperatively | Academic Honesty | Campus Resources | . | A Parting Thought | . ",
    "url": "/sp25/policies/#table-of-contents",
    
    "relUrl": "/policies/#table-of-contents"
  },"69": {
    "doc": "üìú Policies",
    "title": "About the Course",
    "content": "Course Description . Foundations of Data Science combines three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It also delves into social issues surrounding data analysis, such as privacy and study design. Prerequisites . The curriculum and format are designed specifically for students who have not previously taken statistics or computer science courses. Students with some prior experience in either statistics or computing are welcome to enroll and often find that this course offers a new perspective that blends computational and inferential thinking. Students who have taken several statistics or computer science courses should instead take a more advanced course like Data 100. Materials &amp; Resources . Our primary text is an online book called Computational and Inferential Thinking: The Foundations of Data Science. This text was written for the course by the course instructors. A complete PDF of the textbook can be found in the Student Materials Google Drive. The computing platform for the course is hosted at data8.datahub.berkeley.edu. Students find it convenient to use their own computer for the course. If you do not have adequate access to a personal computer, we can help you borrow a machine; please contact data8@berkeley.edu. Support . You are not alone in this course; the staff and instructors are here to support you as you learn the material. It‚Äôs expected that some aspects of the course will take time to master, and the best way to master challenging material is to ask questions. For questions, use Ed. We will also hold in-person and virtual office hours that offer drop-in help on assignments and course material. Your lab TA will be your main point of contact for all course-related questions/grade clarifications. The TAs are here to support you, so please lean on your lab TA if you need more support in the class or have any questions/concerns. Small-group tutoring sessions will be available for students needing additional support to develop confidence with core concepts. In past semesters, students who attended have found these sessions to be a great use of their time. Details about sign-ups will be available a few weeks into the term. ",
    "url": "/sp25/policies/#about-the-course",
    
    "relUrl": "/policies/#about-the-course"
  },"70": {
    "doc": "üìú Policies",
    "title": "Course Components",
    "content": "Live Lecture . Live lectures will be held on Mondays, Wednesdays, and Fridays starting at 10:10am in Wheeler 150. Recordings of these sessions will be provided, but students are highly encouraged to attend in real-time. Slides and lecture examples will be provided on the course website. Labs . Weekly labs include a discussion worksheet covering recent material and a programming-based lab assignment that develops skills with computational and inferential concepts. Lab assignments will be released on Monday night each week. This semester, we offer two lab formats: an attendance-based option called regular lab and a submission-based option called self-service lab. Both are designed to help students learn the course material equally well. You can choose which format you want. Students may switch formats at two points throughout the semester (1) during the first week of lab sections (between Lab 1 and the start of Lab 2) and (2) after the midterm scores have been released. Please note that students looking to switch from self service to regular lab following the midterm will only be able to do so if capacity in lab sections are available. Additionally, if at any point a student has chosen the self service format, their lab grade will be solely based on the completion of the lab notebook, regardless of if they are attending a regular lab (e.g. if a student switches into a regular lab section from self service post-midterm, their credit will still be awarded based on the percentage of test cases passed). Regular Lab . Regular lab meetings are two hours long. The first hour focuses on the discussion worksheet and group problem-solving. Staff highly encourages minimal technology use during this portion of the lab (all materials required will be available at the lab section). The second hour is dedicated to completing the programming-based lab assignment. 80% of lab credit will be attendance-based. The remaining 20% of credit will be awarded for submitting the lab to Gradescope by the Friday 5 pm deadline with all public test cases passing. To earn attendance credit, students must attend the entire discussion and lab section unless they have approval from their GSI to arrive late or leave early. Failure to attend the entire section without prior communication will result in losing attendance credit for that week. Students will be awarded two lab drops to use in the event of extenuating circumstances that prevent them from attending the lab in person. To use a lab drop, you must message your GSI at least one hour prior to the start of your lab, informing them that you will not be in attendance. Note that lab drops are expected to be used only in the case of illness, emergencies, or other circumstances that prevent you from attending. For specific concerns related to your lab section, contact your GSI. Self-Service Lab . Students in the self-service lab must submit the weekly lab assignment to Gradescope by Friday, 5 pm. While no class time will be reserved for the lab assignment, there will be office hours to assist students with completing the lab. Lab assignments include automatic feedback, so completing the lab assignment in full guarantees you a perfect score. Please note that there will be no attendance credit for self service labs. Your lab score will be solely based on your test cases (i.e. if you pass 80% of test cases you will receive a score of 80% on that lab). Each student will be automatically awarded two lab drops that will be applied at the end of the semester. Please note that these lab drops are meant to be used only in the event of illness, emergency, or other extenuating circumstances; the expectation is that students will complete all assignments to the best of their abilities. Choosing a Lab Format . First-year students and students without prior programming experience are strongly encouraged to choose the regular lab. Working on programming-based lab assignments in a small classroom with dedicated course staff available to help is a great way to learn, especially if this is your first exposure to coding! . The self-service lab is designed to appeal to students who learn well from large-format lectures, work independently at their own pace, and come to drop-in office hours when they need help. However, the regular lab format has advantages for students who wish to practice materials in a discussion-based format, work with others and have a dedicated lab uGSI and tutors for immediate support during lab time. Homework and Projects . Weekly homework assignments are a required part of the course. You must complete and submit your homework independently, but you can discuss problems with other students and course staff. See the Learning Cooperatively section below. Homework will be released on Thursday and due the following Wednesday. Similar to the lab policy discussed above, students will be awarded two homework drops for the entire semester, only meant to be used for extenuating circumstances. There are 3 projects throughout the semester. A checkpoint must be reached by the following Friday after the project is released, and the whole project is due by the following Friday after the checkpoint. If you submit a homework or project 24 hours before the deadline or earlier, you will receive 5 bonus points on that assignment. No bonuses will be awarded for extensions, unless you have pre-approved DSP accommodations. Data science is about analyzing real-world data sets, and so you will also complete three projects involving real data. On each project, you may work with a single partner; your partner must be from the lab you enrolled in. Both partners will receive the same score. Exams . The midterm exam will be TENTATIVELY held on Friday, October 18 from 7-9pm PT. Please note the date and time carefully. The final exam is required for a passing grade, and will be held on Monday, December 16, from 8-11am PT. There will be one alternate exam for the midterm which is only for those with exam conflicts. There will not be an alternate exam for the final exam. All exams will be held in-person. ",
    "url": "/sp25/policies/#course-components",
    
    "relUrl": "/policies/#course-components"
  },"71": {
    "doc": "üìú Policies",
    "title": "Grades",
    "content": "Grades will be assigned using the following weighted components. Every assignment is weighted equally in its category. For example, there are 3 projects, so each project is worth (25 / 3)% = 8.3% of your grade. | Activity | Grade | . | Lab Credit | 10% | . | Homeworks | 20% | . | Projects | 25% | . | Midterm | 15% | . | Final | 30% | . The staff will not respond to any questions regarding grade bins or letter grades. Please consult Berkeleytime for historical distributions of grade bins! . Grades for Homeworks, Projects, and Labs will be posted on Gradescope about 1 week after the assignment‚Äôs due date. Solutions to the assignment and common mistakes will also be posted on Ed. It is up to you to check the solutions and request a regrade request before the regrade deadline (typically 5 days after grade release). Regrade requests can be made on Gradescope. Any regrade request past the deadline will not be looked at; this is to enforce the same deadline across all students, so please do not delay reviewing your work. For the midterm exam, there will be a regrade request submission window. Please review the solutions and common mistakes before submitting a regrade request. Requests where a rubric item was incorrectly selected or not selected will be reviewed, but any regrade requests that ask to change the rubric or for partial credit will be ignored. Submitting Assignments . All assignments (homework, labs, and projects) will be submitted on Gradescope. Please refer to this tutorial for submitting assignments. We understand that the submission process is new for many students taking the course. To account for this, we will do our best to accommodate submission-related issues (submitting to the wrong assignment, not saving files correctly, autograder timing out) up until the third week of the course. After the third week, it is your responsibility to confirm you have submitted your work correctly. We reserve the right to impose penalties for having to resubmit students‚Äô work beyond this point. Late Submission . The deadline for all assignments in this course is 5 PM PST. Submissions after this time will be accepted for 24 hours and will incur a 20% penalty. Any submissions later than 24 hours after the deadline will not be accepted. If you need an extension, instructions on how to request an assignment extension are in the following section. Your two lowest homework scores and two lowest lab scores will be dropped in the calculation of your overall grade. If you have an ongoing situation that prevents you from completing course content, please contact the course instructor.. Assignment Extensions . We understand that life happens and want to provide you with the support you need. If you need to request an extension, please fill out this form. Submissions to the form will be visible only to the course instructors and select Lead TAs. Extension requests need to be submitted at least 24 hours before the deadline to be considered. Extensions requests are subject to more detailed review and may require a meeting with course staff or be denied. However, we will try to accommodate requests if they are reasonable and the new deadline does not extend past the solution release date. Please read the entirety of the form and its instructions before/while submitting a request to reduce confusion. We hope that this policy encourages you to be proactive in communicating difficulties in advance while also allowing flexibility in the case of unforeseen circumstances. Accommodations . We will provide appropriate accommodations to all students enrolled in Berkeley‚Äôs Disabled Students Program (DSP). To ensure that you receive the appropriate accommodations, have your DSP specialist submit a letter confirming your status and accommodations. If you‚Äôre not enrolled in DSP, or are in the process of being onboarded by DSP, you may still be eligible for accommodations. We also aim to provide fair and appropriate accommodations to any students who, because of extenuating circumstances, may need them. Please reach out to data8@berkeley.edu in this case. Privacy . All DSP and accommodations-related materials for this course are kept in a repository separate from the rest of the course materials that is visible only to the instructors and selected Lead GSIs. For any DSP and accommodations-related communications, please reach out to data8@berkeley.edu and the DSP Lead will get back to you. This inbox will be visible to future members of course staff, so if you ever have a communication that you wish to remain private, let us know and we can delete the email exchange once the conversation is resolved. Learning Cooperatively . We encourage you to discuss course content with your friends and classmates while working on your assignments. No matter your academic background, you will learn more if you work alongside others than if you work alone. Ask questions, answer questions, and share ideas liberally. If some emergency takes you away from the course for an extended period, or if you decide to drop the course for any reason, please don‚Äôt just disappear silently! You should inform your lab TA and your project partner (if you have one) immediately so that nobody is expecting you to do something you can‚Äôt finish. Academic Honesty . You must write your answers in your own words, and you must not share your completed work. The exception to this rule is that you can share everything related to a project with your project partner (if you have one) and turn in one project between the two of you, and if you are attending a lab session and have a lab partner you can share everything related to that lab with your lab partner. Make a serious attempt at every assignment yourself. If you get stuck, read the textbook and go over the lectures and lab discussion. After that, go ahead and discuss any remaining doubts with others, especially the course staff. That way, you will get the most out of the discussion. It is important to keep in mind the limits of collaboration. As noted above, you and your peers are encouraged to discuss course content and approaches to problem solving. But you cannot share your code or answers with other students. Doing so is considered academic misconduct, and it won‚Äôt help your peers either. Sharing answers will set them up for trouble on upcoming assignments and exams. In addition, posting course content such as homeworks, projects, and exams on any 3rd party websites or submitting your own answers on outside sites/forums is considered academic misconduct. You are also not permitted to turn in answers or code that you have obtained from others or online sources. This includes any generative AI tools, including but not limited to ChatGPT. Not only does such copying count as academic misconduct, but it also circumvents the pedagogical goals of an assignment. You must solve problems with the resources made available in the course. You should never look at or have solutions in your possession from another student or another semester. Please read Berkeley‚Äôs Code of Conduct carefully. Penalties for academic misconduct in Data 8 are severe and include reporting to the Center for Student Conduct. They might also include an F in the course or even dismissal from the university. It‚Äôs just not worth it! . When you need help, reach out to the course staff using Ed, in office hours, and/or during labs. You are not alone in Data 8! Instructors and staff are here to help you succeed. We expect that you will work with integrity and respect for other members of the class, just as the course staff will work with integrity and respect for you. Finally, know that it‚Äôs normal to struggle. Berkeley has high standards, which is one of the reasons its degrees are valued. Everyone struggles, even though many try not to show it. Even if you don‚Äôt fully master everything covered, you can build on what you learn, whereas if you cheat, you‚Äôll have nothing to build on. You aren‚Äôt expected to be perfect; it‚Äôs ok not to get an A. Campus Resources . From Prof. Jeremy: . It can be very tough to be a student at this school! There are applications to clubs and grade requirements to declare majors, which are two things I did not have to experience as an undergrad. Some of you are navigating other challenges, like being a parent or commuting long distances from home to campus. I‚Äôve learned these things from my students during my time so far here teaching, and if you have any other things you‚Äôd like to share with me about your experiences or if you just need someone to talk to about your academic struggles or your future path, I can be there for you. The tutors and GSIs might be an even better resource than myself for some topics, because they are students just like you. So feel free to have conversations with them as well. They can also tell you a little bit about what being an Academic Student Employee (ASE) is like. With regards to reports of sexual misconduct/violence/assault, you may speak with me (and with the course staff, for that matter), but know that we will need to report the discussion to the Title IX officer. This is detailed below. As UC employees, I and the tutors are ‚ÄúResponsible Employees‚Äù and are therefore required to report incidents of sexual violence, sexual harassment, or other conduct prohibited by University policy to the Title IX officer. We cannot keep reports of sexual harassment or sexual violence confidential, but the Title IX officer will consider requests for confidentiality. Note that there are confidential resources available to you through UCB‚Äôs PATH to Care Center, which serves survivors of sexual violence and sexual harassment; call their 24/7 Care Line at 510-643-2005. Below are some campus resources that also may be helpful during the semester: . University Health Services . UCB Path to Care . Student Learning Center . Berkeley International Office . Ombuds Office for Students and Postdoctoral Appointees . Gender Equity Resource Center . Disabled Students‚Äô Program . Center for Educational Justice &amp; Community Engagement . UHS Counseling and Psychological Services (CAPS) . Campus Academic Accommodations Hub . ASUC Student Advocate‚Äôs Office . Basic Needs Center . ASUC Mental Health Resources Guide . ",
    "url": "/sp25/policies/#grades",
    
    "relUrl": "/policies/#grades"
  },"72": {
    "doc": "üìú Policies",
    "title": "A Parting Thought",
    "content": "The main goal of the course is that you should learn and have a fantastic experience doing so. Please keep that goal in mind throughout the semester. Welcome to Data 8! . ",
    "url": "/sp25/policies/#a-parting-thought",
    
    "relUrl": "/policies/#a-parting-thought"
  },"73": {
    "doc": "üìú Policies",
    "title": "üìú Policies",
    "content": " ",
    "url": "/sp25/policies/",
    
    "relUrl": "/policies/"
  },"74": {
    "doc": "üêç Python Reference",
    "title": "Detailed Python Reference Sheet",
    "content": "Created by Nishant Kheterpal and Jessica Hu, Contributions by Jonathan Ferrari, Updated and Maintained by Edwin Vargas and Bing Concepcion . ",
    "url": "/sp25/reference/#detailed-python-reference-sheet",
    
    "relUrl": "/reference/#detailed-python-reference-sheet"
  },"75": {
    "doc": "üêç Python Reference",
    "title": "Table of Contents",
    "content": ". | Detailed Python Reference Sheet . | Abbreviated Reference Sheet | Table Functions and Methods | String Methods | Array Functions and Methods | Table Filtering Predicates | Miscellaneous Functions | JupyterHub Keyboard Shortcuts | . | . ",
    "url": "/sp25/reference/#table-of-contents",
    
    "relUrl": "/reference/#table-of-contents"
  },"76": {
    "doc": "üêç Python Reference",
    "title": "Abbreviated Reference Sheet",
    "content": "For Fall 2024, students will receive an abbreviated reference sheet for exams. | Midterm reference sheet | . ",
    "url": "/sp25/reference/#abbreviated-reference-sheet",
    
    "relUrl": "/reference/#abbreviated-reference-sheet"
  },"77": {
    "doc": "üêç Python Reference",
    "title": "Table Functions and Methods",
    "content": "In the examples in the left column, np refers to the NumPy module, as usual. Everything else is a function, a method, an example of an argument to a function or method, or an example of an object we might call the method on. For example, tbl refers to a table, array refers to an array, str refers to a string, and num refers to a number. array.item(0) is an example call for the method item, and in that example, array is the name previously given to some array. | Name | Description | Input | Output | . | Table() | Create an empty table, usually to extend with data (Ch 6) | None | An empty Table | . | Table().read_table(filename) | Create a table from a data file (Ch 6) | string: the name of the file | Table with the contents of the data file | . | tbl.with_columns(name, values) tbl.with_columns(n1, v1, n2, v2,...) | A table with an additional or replaced column or columns. name is a string for the name of a column, values is an array (Ch 6) | 1. string: the name of the new column; 2. array: the values in that column | Table: a copy of the original Table with the new columns added | . | tbl.column(column_name_or_index) | The values of a column (an array) (Ch 6) | string or int: the column name or index | array: the values in that column | . | tbl.num_rows | Compute the number of rows in a table (Ch 6) | None | int: the number of rows in the table | . | tbl.num_columns | Compute the number of columns in a table (Ch 6) | None | int: the number of columns in the table | . | tbl.labels | Lists the column labels in a table (Ch 6) | None | array: the names of each column (as strings) in the table | . | tbl.select(col1, col2, ...) | Create a copy of a table with only some of the columns. Each column is the column name or index. (Ch 6) | string or int: column name(s) or index(es) | Table with the selected columns | . | tbl.drop(col1, col2, ...) | Create a copy of a table without some of the columns. Each column is the column name or index. (Ch 6) | string or int: column name(s) or index(es) | Table without the selected columns | . | tbl.relabeled(old_label, new_label) | Creates a new table, changing the column name specified by the old label to the new label, and leaves the original table unchanged. (Ch 6) | 1. string: the old column name 2. string: the new column name | Table: a new Table | . | tbl.show(n) | Display n rows of a table. If no argument is specified, defaults to displaying the entire table. (Ch 6.1) | (Optional) int: number of rows you want to display | None: displays a table with n rows | . | tbl.sort(column_name_or_index) | Create a copy of a table sorted by the values in a column. Defaults to ascending order unless descending = True is included. (Ch 6.1) | 1. string or int: column index or name 2. (Optional) descending=True | Table: a copy of the original with the column sorted | . | tbl.where(column, predicate) | Create a copy of a table with only the rows that match some predicate. See Table.where predicates below. (Ch 6.2) | 1. string or int: column name or index 2. are.(...) predicate | Table: a copy of the original table with only the rows that match the predicate | . | tbl.take(row_indices) | A table with only the rows at the given indices. row_indices is either an array of indices or an integer corresponding to one index. (Ch 6.2) | array of ints: the indices of the rows to be included in the Table OR int: the index of the row to be included | Table: a copy of the original table with only the rows at the given indices | . | tbl.scatter(x_column, y_column) | Draws a scatter plot consisting of one point for each row of the table. Note that x_column and y_column must be strings specifying column names. Include optional argument fit_line=True if you want to draw a line of best fit for each set of points. (Ch 7) | 1. string: name of the column on the x-axis 2. string: name of the column on the y-axis 3. (Optional) fit_line=True | None: draws a scatter plot | . | tbl.plot(x_column, y_column) tbl.plot(x_column) | Draw a line graph consisting of one point for each row of the table. If you only specify one column, it will plot the rest of the columns on the y-axis as different colored lines. (Ch 7) | 1. string: name of the column on the x-axis 2. string: name of the column on the y-axis | None: draws a line graph | . | tbl.barh(categories) tbl.barh(categories, values) | Displays a bar chart with bars for each category in a column, with length proportional to the corresponding frequency. values argument unnecessary if table has only a column of categories and a column of values. (Ch 7.1) | 1. string: name of the column with categories 2. (Optional) string: the name of the column with values for corresponding categories | None: draws a bar chart | . | tbl.hist(column, unit, bins, group) | Generates a histogram of the numerical values in a column. unit and bins are optional arguments, used to label the axes and group the values into intervals (bins), respectively. Bins have the form [a, b), where a is included in the bin and b is not. (Ch 7.2) | 1. string: name of the column with categories 2. (Optional) string: units of x-axis 3. (Optional) array of ints/floats denoting bin boundaries 4. (Optional) string: name of categorical column to draw separate overlaid histograms for | None: draws a histogram | . | tbl.bin(column_name_or_index) tbl.bin(column_name_or_index, bins) | Groups values into intervals, known as bins. Results in a two-column table that contains the number of rows in each bin. The first column lists the left endpoints of the bins, except in the last row. If the bins argument isn‚Äôt used, default is to produce 10 equally wide bins between the min and max values of the data. (Ch 7.2) | 1. string or int: column name(s) or index(es) 2. (Optional) array of ints/floats denoting bin boundaries or an int of the number of bins you want | Table: a new tables | . | tbl.apply(function) tbl.apply(function, col1, col2, ...) | Returns an array of values resulting from applying a function to each item in a column. (Ch 8.1) | 1. function: function to apply to column 2. (Optional) string: name of the column to apply function to (if you have multiple columns, the respective column‚Äôs values will be passed as the corresponding argument to the function), and if there is no argument, your function will be applied to every row object in tbl | array: contains an element for each value in the original column after applying the function to it | . | tbl.group(column_or_columns, collect) | Group rows by unique values or combinations of values in a column(s). Multiple columns must be entered in array or list form. Other values aggregated by count (default) or optional argument collect. (Ch 8.2) | 1. string or array of strings: column(s) on which to group 2. (Optional) function: function to aggregate values in cells (defaults to count) | Table: a new Table | . | tbl.pivot(col1, col2, values, collect) tbl.pivot(col1, col2) | A pivot table where each unique value in col1 has its own column and each unique value in col2 has its own row. Count or aggregate values from a third column, collect with some function. Default values and collect return counts in cells. (Ch 8.3) | 1. string: name of column whose unique values will make up columns of pivot table 2. string: name of column whose unique values will make up rows of pivot table 3. (Optional) string: name of column that describes the values of cell 4. (Optional) function: how the values are collected, e.g. sum or np.mean | Table: a new Table | . | tblA.join(colA, tblB, colB) tblA.join(colA, tblB) | Generate a table with the columns of tblA and tblB, containing rows for all values of a column that appear in both tables. Default colB is colA. colA and colB must be strings specifying column names. (Ch 8.4) | 1. string: name of a column in tblA with values to join on 2. Table: other Table 3. (Optional) string: if column names are different between Tables, the name of the shared column in tblB | Table: a new Table | . | tbl.sample(n) tbl.sample(n, with_replacement) | A new table where n rows are randomly sampled from the original table; by default, n=tbl.num_rows. Default is with replacement. For sampling without replacement, use argument with_replacement=False. For a non-uniform sample, provide a third argument weights=distribution where distribution is an array or list containing the probability of each row. (Ch 10) | 1. int: sample size 2. (Optional) with_replacement=False | Table: a new Table with n rows | . | tbl.row(row_index) | Accesses the row of a table by taking the index of the row as its argument. Note that rows are in general not arrays, as their elements can be of different types. However, you can use .item to access a particular element of a row using row.item(label). (Ch 17.3) | int: row index | Row object with the values of the row and labels of the corresponding columns | . | tbl.rows | Can use to access all of the rows of a table. | None | Rows object made up of all rows as individual row objects | . | tbl.split(n) | Splits tbl into two distinct tables. Where the first table contains n rows randomly sampled without replacement, and the second table contains the remaining rows (Ch 17.6) | int: The number of rows randomly sampled into the first table. n must be between 1 and tbl.num_rows - 1 | tuple: of two tables | . ",
    "url": "/sp25/reference/#table-functions-and-methods",
    
    "relUrl": "/reference/#table-functions-and-methods"
  },"78": {
    "doc": "üêç Python Reference",
    "title": "String Methods",
    "content": "| Name | Description | . | str.split(separator) | Splits the string (str) into a list based on the separator that is passed in | . | str.join(array) | Combines each element of array into one string, with str being in-between each element | . | str.replace(old_string, new_string) | Replaces each occurrence of old_string in str with the value of new_string (Ch 4.2.1) | . ",
    "url": "/sp25/reference/#string-methods",
    
    "relUrl": "/reference/#string-methods"
  },"79": {
    "doc": "üêç Python Reference",
    "title": "Array Functions and Methods",
    "content": "| Name | Chapter | Description | . | max(array) | 3.3 | Returns the maximum value of an array | . | min(array) | 3.3 | Returns the minimum value of an array | . | sum(array) | 3.3 | Returns the sum of the values in an array | . | abs(num), np.abs(array) | 3.3 | Takes the absolute value of a number or each number in an array | . | round(num), np.round(array) round(num, decimals), np.round(array, decimals) | 3.3 | Rounds a number or an array of numbers to the nearest integer. If decimals (integer) is included, rounds to that many digits. If decimals is negative, remove that many digits of precision. | . | len(array), len(string) | 3.3 | Returns the length (number of elements) of an array. If a string (str) is passed in instead, returns the number of characters in the string. | . | make_array(val1, val2, ...) | 5 | Makes a numpy array with the values passed in | . | np.average(array) np.mean(array) | 5.1 | Returns the mean value of an array | . | np.std(array) | 14.2 | Returns the standard deviation of an array | . | np.diff(array) | 5.1 | Returns a new array of size len(arr)-1 with elements equal to the difference between adjacent elements; val_2 - val_1, val_3 - val_2, etc. | . | np.sqrt(array) | 5.1 | Returns an array with the square root of each element | . | np.arange(start, stop, step) np.arange(start, stop) np.arange(stop) | 5.2 | An array of numbers starting with start, going up in increments of step, and going up to but excluding stop. When start and/or step are left out, default values are used in their place. Default step is 1; default start is 0. | . | array.item(index) | 5.3 | Returns the i-th item in an array (remember Python indices start at 0!) | . | np.random.choice(array, n) np.random.choice(array) | 9 | Picks one (by default) or some number (n) of items from array at random with replacement. | . | np.count_nonzero(array) | 9 | Returns the number of non-zero (or True) elements in an array. | . | np.append(array, item) | 9.2 | Returns a copy of the input array with item appended to the end. | . | percentile(percentile, array) | 13.1 | Returns the corresponding percentile of an array. | . ",
    "url": "/sp25/reference/#array-functions-and-methods",
    
    "relUrl": "/reference/#array-functions-and-methods"
  },"80": {
    "doc": "üêç Python Reference",
    "title": "Table Filtering Predicates",
    "content": "Any of these predicates can be negated by adding not_ in front of them, e.g. are.not_equal_to(Z) or are.not_containing(S). | Predicate | Description | . | are.equal_to(Z) | Equal to Z | . | are.not_equal_to(Z) | Not equal to Z | . | are.above(x) | Greater than x | . | are.above_or_equal_to(x) | Greater than or equal to x | . | are.below(x) | Less than x | . | are.below_or_equal_to(x) | Less than or equal to x | . | are.between(x, y) | Greater than or equal to x and less than y | . | are.between_or_equal_to(x, y) | Greater than or equal to x, and less than or equal to y | . | are.strictly_between(x, y) | Greater than x and less than y | . | are.contained_in(A) | Is a substring of A (if A is a string) or an element of A (if A is a list/array) | . | are.containing(S) | Contains the string S | . ",
    "url": "/sp25/reference/#table-filtering-predicates",
    
    "relUrl": "/reference/#table-filtering-predicates"
  },"81": {
    "doc": "üêç Python Reference",
    "title": "Miscellaneous Functions",
    "content": "These are functions in the datascience library that are used in the course that don‚Äôt fall into any of the categories above. You can also read more about all functions in the datascience library on the datascience documentation. | Name | Description | Intput | Output | . | sample_proportions(sample_size, model_proportions) | sample_size should be an integer, model_proportions an array of probabilities that sum up to 1. The function samples sample_size objects from the distribution specified by model_proportions. It returns an array with the same size as model_proportions. Each item in the array corresponds to the proportion of times it was sampled out of the sample_size times. (Ch 11.1) | 1. int: sample size 2. array: an array of proportions that should sum to 1 | array: each item corresponds to the proportion of times that corresponding item was sampled from model_proportions in sample_size draws, should sum to 1 | . | minimize(function) | Returns an array of values such that if each value in the array was passed into function as arguments, it would minimize the output value of function. (Ch 15.4) | function: name of a function that will be minimized | array: An array in which each element corresponds to an argument that minimizes the output of the function. Values in the array are listed based on the order they are passed into the function; the first element in the array is also going to be the first value passed into the function. | . ",
    "url": "/sp25/reference/#miscellaneous-functions",
    
    "relUrl": "/reference/#miscellaneous-functions"
  },"82": {
    "doc": "üêç Python Reference",
    "title": "JupyterHub Keyboard Shortcuts",
    "content": "First, to enter shortcut mode/exit editing mode, press Esc. This will then enable you to use any of the below keyboard shortcuts. | Operation | Keys | . | To enter shortcut mode/exit editing mode | Esc | . | Enter edit mode | Enter | . | Insert cell above | a | . | Insert cell below | b | . | Delete selected cell | d + d (Press d twice) | . | Convert cell to Markdown cell | m | . | Convert cell to Code cell | y | . | Undo cell operation | z | . | Copy cell | c | . | Paste cell | v | . | Paste cell above | Shift + v | . | Redo | Ctrl + Shift + z | . | Undo | Ctrl + z | . ",
    "url": "/sp25/reference/#jupyterhub-keyboard-shortcuts",
    
    "relUrl": "/reference/#jupyterhub-keyboard-shortcuts"
  },"83": {
    "doc": "üêç Python Reference",
    "title": "üêç Python Reference",
    "content": " ",
    "url": "/sp25/reference/",
    
    "relUrl": "/reference/"
  },"84": {
    "doc": "üìö Resources",
    "title": "Resources",
    "content": " ",
    "url": "/sp25/resources/#resources",
    
    "relUrl": "/resources/#resources"
  },"85": {
    "doc": "üìö Resources",
    "title": "Table of Contents",
    "content": ". | Materials . | Student Materials Folder | Guides | Table Resources | Supplemental Videos | . | Exam Resources | Past Exams | Exam Problems by Topic | Wellness Resources | . ",
    "url": "/sp25/resources/#table-of-contents",
    
    "relUrl": "/resources/#table-of-contents"
  },"86": {
    "doc": "üìö Resources",
    "title": "Materials",
    "content": "Student Materials Folder . We will post student materials in this folder throughout the semester. Guides . | Arrays Primer | Tabular Thinking | Confidence Intervals | JupyterHub Tips | Sampling Methods | Table Functions | Hypothesis Testing | . Table Resources . | Table Function Visualizer | . Supplemental Videos . | Group Animation | Join Animation | Pivot Animation | . ",
    "url": "/sp25/resources/#materials",
    
    "relUrl": "/resources/#materials"
  },"87": {
    "doc": "üìö Resources",
    "title": "Exam Resources",
    "content": " ",
    "url": "/sp25/resources/#exam-resources",
    
    "relUrl": "/resources/#exam-resources"
  },"88": {
    "doc": "üìö Resources",
    "title": "Past Exams",
    "content": "Exams, practice exams, and walkthrough videos from previous semesters can be found below. These exams may differ slightly in terms of material covered and syntax used, as the datascience module has changed over time. Note: For the Fall 2024 Midterm, students will receive an abbreviated reference sheet. | Semester | Midterm | Final | . | Fall 2024 | Exam (Solutions) [Walkthrough] | ¬† | . | Summer 2024 | Exam (Solutions) | Exam (Solutions) | . | Spring 2024 | Exam (Solutions) [Walkthrough] | Exam (Solutions) [Walkthrough] | . | Fall 2023 | Exam (Solutions) [Walkthrough] | Exam (Solutions) [Walkthrough] | . | Summer 2023 | Exam (Solutions) | Exam (Solutions) | . | Spring 2023 | Exam (Solutions) [Walkthrough] | Exam (Solutions) [Walkthrough] | . | Fall 2022 | Exam (Solutions) [Walkthrough] | Exam (Solutions) [Walkthrough] | . | Summer 2022 | Exam (Solutions) | Exam (Solutions) | . | Spring 2022 | Exam (Solutions) [Walkthrough] | Exam (Solutions) [Walkthrough] | . | Fall 2021 | Exam (Solutions) | Exam (Solutions) [Walkthrough] | . | Summer 2021 | Solutions | Solutions | . | Spring 2021 | Exam (Solutions) | Exam (Solutions) [Walkthrough] | . | Fall 2020 | Exam (Solutions) | Exam (Solutions) | . | Summer 2020 | Exam (Solutions) | No final exam | . | Spring 2020 | Exam (Solutions) | Exam (Solutions) [Explanations] | . | Fall 2019 | Exam (Solutions) | Exam (Solutions) | . | Summer 2019 | Exam (Solutions) | Exam (Solutions) | . | Spring 2019 | Exam (Solutions) | Exam (Solutions) | . | Fall 2018 | Exam (Solutions) | Exam (Solutions) | . | Summer 2018 | Exam (Solutions) | Exam (Solutions) | . | Spring 2018 | Exam (Solutions) | Exam (Solutions) | . | Fall 2017 | Exam (Solutions) | Exam (Solutions) | . | Summer 2017 | Exam (Solutions) | Exam (Solutions) | . | Spring 2017 | Exam (Solutions), Practice Exam (Solutions) | Exam (Solutions), Practice Exam (Solutions) | . | Fall 2016 | Exam | Exam (Solutions) | . ",
    "url": "/sp25/resources/#past-exams",
    
    "relUrl": "/resources/#past-exams"
  },"89": {
    "doc": "üìö Resources",
    "title": "Exam Problems by Topic",
    "content": ". | A review document identifying past exam problems by topic can be found here! | Created by Brandon Concepcion | . Tables . | Spring 2024 Midterm Q4(b - d) | Fall 2023 Midterm Q5d | Fall 2023 Midterm Q4(a - e) | Spring 2022 Final Q2 | Spring 2022 Midterm Q1 | Spring 2022 Midterm Q2b | Fall 2021 Final Q12 | Fall 2021 Final Q2 | Fall 2021 Midterm Q1 | Fall 2021 Midterm Q2 | Spring 2021 Final Q3 | Spring 2021 Midterm Q1 | Fall 2020 Final Q1 | Fall 2020 Midterm Q5 | Spring 2020 Midterm Q2 (e - f) | Spring 2020 Midterm Q3(e - f, i, j) | Fall 2019 Midterm Q2 | Fall 2019 Midterm Q4 | Spring 2019 Final Q3 | Spring 2019 Final Q4a | Spring 2019 Midterm Q3 | Fall 2018 Midterm Q2 | Spring 2018 Final Q5 | Spring 2018 Midterm Q1 | Fall 2017 Final Q1 | Spring 2017 Final Q1 | Spring 2017 Midterm Q1 | Fall 2016 Final Q9 | . Standard Hypothesis Testing . | Spring 2024 Midterm Q4e | Spring 2024 Midterm Q5 | Fall 2023 Midterm Q5 (a - c, e - f) | Fall 2023 Midterm Q4f | Fall 2023 Midterm Q1 (d, f) | Spring 2022 Final Q6e | Spring 2022 Final Q1k | Spring 2022 Midterm Q4 | Fall 2021 Final Q6 | Fall 2021 Midterm Q6 | Spring 2021 Final Q1b | Spring 2021 Midterm Q5 | Fall 2020 Final Q7 | Fall 2020 Midterm Q7 | Spring 2020 Midterm Q4 (a - c) | Spring 2020 Midterm Q3k | Fall 2019 Midterm Q6 | Fall 2019 Midterm Q3 (e - g, h, i) | Spring 2019 Final Q5 | Spring 2019 Midterm Q6 | Spring 2019 Midterm Q2a | Fall 2018 Final Q4 (f - h) | Fall 2018 Midterm Q3 | Spring 2018 Final Q8 | Spring 2018 Final Q11 | Spring 2018 Midterm Q5 (b - d) | Spring 2018 Midterm Q4 | Fall 2017 Final Q3 | Spring 2017 Final Q2 | Spring 2017 Midterm Q4 | Fall 2016 Final Q15 | Fall 2016 Final Q13 | Fall 2016 Final Q4 | . Histograms/ Visualizations . | Spring 2024 Midterm Q4a | Fall 2023 Midterm Q4g | Fall 2023 Midterm Q1g | Spring 2022 Final Q7(a, b) | Spring 2022 Final Q3h | Spring 2022 Midterm Q2 | Spring 2022 Midterm Q1e | Fall 2021 Final Q3 | Fall 2021 Midterm Q9 | Fall 2021 Midterm Q6b | Fall 2021 Midterm Q5 | Spring 2021 Final Q7 (a - c) | Spring 2021 Midterm Q7 | Spring 2021 Midterm Q6 | Fall 2020 Final Q5b | Fall 2020 Final Q4g | Fall 2020 Midterm Q3 | Fall 2020 Midterm Q2 | Spring 2020 Midterm Q3 (a - d) | Spring 2020 Midterm Q2 (a - d) | Fall 2019 Midterm Q5 | Fall 2019 Midterm Q2 (a - d) | Spring 2019 Midterm Q4 | Spring 2019 Midterm Q2b | Fall 2018 Final Q2a | Fall 2018 Midterm Q1 | Spring 2018 Midterm Q6 | Spring 2017 Midterm Q2 | Fall 2016 Final Q14 | Fall 2016 Final Q11 | Fall 2016 Final Q10 | Fall 2016 Final Q8 | Fall 2016 Final Q6 | Fall 2016 Final Q2 | . Functions . | Fall 2023 Midterm Q4a | Fall 2023 Midterm Q1L | Spring 2022 Final Q7h | Spring 2022 Final Q6d | Fall 2021 Final Q6f | Fall 2021 Final Q6a | Fall 2021 Final Q2d | Fall 2021 Final Q1 | Fall 2021 Midterm Q8a | Fall 2020 Final Q5a | Spring 2020 Midterm Q3h | Spring 2019 Midterm Q4d | Fall 2018 Midterm Q2g | . Iteration . | Spring 2024 Midterm Q2b | Fall 2021 Midterm Q8b | Fall 2020 Midterm Q4 (f, g) | Fall 2019 Midterm Q3g | Spring 2019 Midterm Q6d | Spring 2019 Midterm Q2c | Fall 2018 Midterm Q3d | Spring 2018 Midterm Q2 | Spring 2017 Midterm Q3b | . Confidence Intervals . | Spring 2022 Final Q3 (a - g) | Spring 2022 Final Q1f | Fall 2021 Final Q10 | Fall 2021 Final Q9 | Fall 2021 Final Q5b | Spring 2021 Final Q4 (d - h) | Spring 2021 Final Q2 (d, e) | Fall 2020 Final Q6 | Spring 2019 Final Q10f | Spring 2018 Final Q6 | Spring 2018 Final Q1 | . Python Practice . | Spring 2024 Midterm Q2b | Spring 2021 Midterm Q2 | Fall 2020 Midterm Q4 (a - e) | Fall 2019 Midterm Q1 | Spring 2019 Final Q1 | Spring 2019 Midterm Q1 | . Bootstrap . | Spring 2022 Final Q6c | Fall 2021 Final Q10 | Fall 2021 Final Q5a | Fall 2020 Final Q7 (c - f) | Fall 2020 Final Q5h | Fall 2018 Final Q5 | Fall 2018 Final Q3 | Fall 2016 Final Q16 | Fall 2016 Final Q12 | Fall 2016 Final Q7 | . A/B Testing . | Fall 2023 Midterm Q1 (e, i) | Fall 2021 Midterm Q7 | Fall 2021 Midterm Q5 | Spring 2021 Final Q1a | Spring 2021 Midterm Q3 | Fall 2020 Midterm Q8 | Spring 2020 Midterm Q4 (d, e) | Spring 2019 Midterm Q7 | Fall 2018 Final Q6 | . Sampling . | Fall 2023 Midterm Q2b (i - i.v) | Fall 2021 Midterm Q8 (c, d) | Fall 2017 Final Q2 (e - h) | Fall 2017 Final Q6 | Spring 2017 Final Q3 | . Center and Spread . | Fall 2023 Midterm Q2b (vi) | Fall 2023 Midterm Q1j | Spring 2022 Final Q1 (i, j) | Spring 2021 Final Q2f | Fall 2020 Final Q6f | Spring 2018 Final Q2 | . Law of Averages . | Fall 2023 Midterm Q1c | Fall 2018 Midterm Q3f | Spring 2018 Midterm Q5a | Spring 2017 Midterm Q3c | . Sample Means . | Spring 2022 Final Q3 (b - c, f) | Fall 2021 Final Q5b | Spring 2021 Final Q2 (a - d) | . Central Limit Theorem . | Spring 2022 Final Q1(i, j) | Spring 2022 Final Q3d | Spring 2021 Final Q2f | Spring 2018 Final Q2 | . Experiments . | Spring 2024 Midterm Q2b | Fall 2023 Midterm Q1h | Fall 2020 Midterm Q1 | Spring 2018 Final Q3 | . Correlation/Regression/Least Squares . | Spring 2022 Final Q1 (a, f, g, n) | Spring 2022 Final Q6 (a - d) | Fall 2021 Final Q7 | Spring 2021 Final Q4 (a - c) | Fall 2020 Final Q5 (c, d) | Spring 2019 Final Q10 (a - e) | Fall 2018 Final Q2 | Fall 2017 Final Q10 | Spring 2017 Final Q4 | . Residuals/Regression Inference . | Spring 2022 Final Q1f | Spring 2022 Final Q1m | Spring 2022 Final Q3h | Spring 2021 Final Q4(d - g) | Spring 2021 Final Q2g | Fall 2021 Final Q8 | Fall 2020 Final Q5 (e - i) | Spring 2019 Final Q7 | Spring 2019 Final Q9 | Fall 2018 Final Q7 | Spring 2018 Final Q7 | Spring 2018 Final Q4 | Fall 2016 Final Q3 | . Classification/Classifiers/Decisions . | Spring 2022 Final Q1 (b - d) | Spring 2022 Final Q7 (c - h) | Fall 2021 Final Q13 | Spring 2021 Final Q7 (d - f) | Fall 2020 Final Q4 (a - f) | Fall 2020 Final Q8 | Spring 2019 Final Q4 | Fall 2018 Final Q1 | Spring 2018 Final Q9 | Spring 2018 Final Q10 | Fall 2017 Final Q9 | Fall 2017 Final Q5 | Spring 2017 Final Q5 | Fall 2016 Final Q5 | Fall 2016 Final Q1 | . Probability . | Spring 2024 Midterm Q2a | Fall 2023 Midterm Q2 a(i. - iv.), b( i.- ii.) | Fall 2023 Midterm Q1a | Spring 2022 Final Q5 | Spring 2022 Final Q4 | Spring 2022 Final Q1L | Spring 2022 Midterm Q3 | Fall 2021 Final Q11 | Fall 2021 Midterm Q3 | Spring 2021 Final Q6 | Spring 2021 Final Q5 | Spring 2021 Midterm Q4 | Fall 2020 Final Q3 | Fall 2020 Final Q2 | Fall 2020 Midterm Q6 | Spring 2020 Midterm Q1 | Fall 2019 Midterm Q3 (a - d) | Spring 2019 Final Q2 | Spring 2019 Final Q6 | Spring 2019 Midterm Q5 | Fall 2018 Final Q4 | Fall 2018 Midterm Q4 | Spring 2018 Midterm Q3 | Fall 2017 Final Q8 | Spring 2017 Midterm Q3a | . ",
    "url": "/sp25/resources/#exam-problems-by-topic",
    
    "relUrl": "/resources/#exam-problems-by-topic"
  },"90": {
    "doc": "üìö Resources",
    "title": "Wellness Resources",
    "content": "Your well-being matters, and we hope that Data 8 is never a barrier to taking care of your mental and physical health. Below are some campus resources that may be helpful: . | University Health Services | UHS Counseling and Psychological Services (CAPS) | Campus Academic Accommodations Hub | ASUC Student Advocate‚Äôs Office | Basic Needs Center | ASUC Mental Health Resources Guide | . ",
    "url": "/sp25/resources/#wellness-resources",
    
    "relUrl": "/resources/#wellness-resources"
  },"91": {
    "doc": "üìö Resources",
    "title": "üìö Resources",
    "content": " ",
    "url": "/sp25/resources/",
    
    "relUrl": "/resources/"
  },"92": {
    "doc": "üè¢ Weekly OH",
    "title": "Weekly Office Hours",
    "content": "We use an online sign-up system to help keep track of everyone. | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | 6:00 PM | 8:00 PM | . | ",
    "url": "/sp25/schedule/#weekly-office-hours",
    
    "relUrl": "/schedule/#weekly-office-hours"
  },"93": {
    "doc": "üè¢ Weekly OH",
    "title": "Monday",
    "content": ". | Lecture 10:00 AM‚Äì11:00 AM Wheeler 150 | . | ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"94": {
    "doc": "üè¢ Weekly OH",
    "title": "Tuesday",
    "content": "| ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"95": {
    "doc": "üè¢ Weekly OH",
    "title": "Wednesday",
    "content": ". | Lecture 10:00 AM‚Äì11:00 AM Wheeler 150 | Office Hours 12:00 PM‚Äì5:00 PM Warren 101-B &amp; Online | . | ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"96": {
    "doc": "üè¢ Weekly OH",
    "title": "Thursday",
    "content": ". | Office Hours 10:00 AM‚Äì2:00 PM Warren 101-B &amp; Online | . | ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"97": {
    "doc": "üè¢ Weekly OH",
    "title": "Friday",
    "content": ". | Lecture 10:00 AM‚Äì11:00 AM Wheeler 150 | . | . ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"98": {
    "doc": "üè¢ Weekly OH",
    "title": "üè¢ Weekly OH",
    "content": " ",
    "url": "/sp25/schedule/",
    
    "relUrl": "/schedule/"
  },"99": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "Staff",
    "content": "We hope you enjoy Data 8 as much as we did! Hover over some of our icons for a fun surprise :0 . Jump to: Instructors, Head Teaching Assistants, Teaching Assistants, Tutors . ",
    "url": "/sp25/staff/#staff",
    
    "relUrl": "/staff/#staff"
  },"100": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "Instructors",
    "content": " ",
    "url": "/sp25/staff/#instructors",
    
    "relUrl": "/staff/#instructors"
  },"101": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "Head Teaching Assistants",
    "content": "Email data8@berkeley.edu for all logistical and student support questions! . &lt;/div&gt; . ",
    "url": "/sp25/staff/#head-teaching-assistants",
    
    "relUrl": "/staff/#head-teaching-assistants"
  },"102": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "Teaching Assistants",
    "content": "&lt;/div&gt; . ",
    "url": "/sp25/staff/#teaching-assistants",
    
    "relUrl": "/staff/#teaching-assistants"
  },"103": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "Tutors",
    "content": "&lt;/div&gt; . ",
    "url": "/sp25/staff/#tutors",
    
    "relUrl": "/staff/#tutors"
  },"104": {
    "doc": "üßë‚Äçüè´ Staff",
    "title": "üßë‚Äçüè´ Staff",
    "content": " ",
    "url": "/sp25/staff/",
    
    "relUrl": "/staff/"
  }
}
